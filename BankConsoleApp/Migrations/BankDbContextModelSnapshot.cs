// <auto-generated />
using System;
using BankConsoleApp.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankConsoleApp.Migrations
{
    [DbContext(typeof(BankDbContext))]
    partial class BankDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankConsoleApp.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TryToEnterTimes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1000f,
                            CardNumber = "1234567812345678",
                            HolderName = "علی احمدی",
                            IsActive = true,
                            Password = "password123",
                            TryToEnterTimes = 0
                        },
                        new
                        {
                            Id = 2,
                            Balance = 1500f,
                            CardNumber = "2345678923456789",
                            HolderName = "مریم محمدی",
                            IsActive = true,
                            Password = "password456",
                            TryToEnterTimes = 0
                        },
                        new
                        {
                            Id = 3,
                            Balance = 2000f,
                            CardNumber = "3456789034567890",
                            HolderName = "رضا حسینی",
                            IsActive = true,
                            Password = "password789",
                            TryToEnterTimes = 0
                        },
                        new
                        {
                            Id = 4,
                            Balance = 2500f,
                            CardNumber = "4567890145678901",
                            HolderName = "سارا کریمی",
                            IsActive = true,
                            Password = "password101",
                            TryToEnterTimes = 0
                        },
                        new
                        {
                            Id = 5,
                            Balance = 3000f,
                            CardNumber = "5678901256789012",
                            HolderName = "حسین سلطانی",
                            IsActive = true,
                            Password = "password202",
                            TryToEnterTimes = 0
                        });
                });

            modelBuilder.Entity("BankConsoleApp.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("DestinationCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("forCardId")
                        .HasColumnType("int");

                    b.Property<bool>("isSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("TransactionId");

                    b.HasIndex("forCardId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankConsoleApp.Entities.Transaction", b =>
                {
                    b.HasOne("BankConsoleApp.Entities.Card", "forCard")
                        .WithMany("transactions")
                        .HasForeignKey("forCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("forCard");
                });

            modelBuilder.Entity("BankConsoleApp.Entities.Card", b =>
                {
                    b.Navigation("transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
